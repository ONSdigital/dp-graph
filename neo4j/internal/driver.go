// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"context"
	"github.com/ONSdigital/dp-graph/neo4j/driver"
	"github.com/ONSdigital/dp-graph/neo4j/mapper"
	"sync"
)

var (
	lockNeo4jDriverMockClose       sync.RWMutex
	lockNeo4jDriverMockCount       sync.RWMutex
	lockNeo4jDriverMockExec        sync.RWMutex
	lockNeo4jDriverMockHealthcheck sync.RWMutex
	lockNeo4jDriverMockRead        sync.RWMutex
	lockNeo4jDriverMockReadRows    sync.RWMutex
)

// Neo4jDriverMock is a mock implementation of Neo4jDriver.
//
//     func TestSomethingThatUsesNeo4jDriver(t *testing.T) {
//
//         // make and configure a mocked Neo4jDriver
//         mockedNeo4jDriver := &Neo4jDriverMock{
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("TODO: mock out the Close method")
//             },
//             CountFunc: func(query string) (int64, error) {
// 	               panic("TODO: mock out the Count method")
//             },
//             ExecFunc: func(query string, params map[string]interface{}) error {
// 	               panic("TODO: mock out the Exec method")
//             },
//             HealthcheckFunc: func() (string, error) {
// 	               panic("TODO: mock out the Healthcheck method")
//             },
//             ReadFunc: func(query string, mapp mapper.ResultMapper, single bool) error {
// 	               panic("TODO: mock out the Read method")
//             },
//             ReadRowsFunc: func(query string) (*driver.BoltRowReader, error) {
// 	               panic("TODO: mock out the ReadRows method")
//             },
//         }
//
//         // TODO: use mockedNeo4jDriver in code that requires Neo4jDriver
//         //       and then make assertions.
//
//     }
type Neo4jDriverMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// CountFunc mocks the Count method.
	CountFunc func(query string) (int64, error)

	// ExecFunc mocks the Exec method.
	ExecFunc func(query string, params map[string]interface{}) error

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// ReadFunc mocks the Read method.
	ReadFunc func(query string, mapp mapper.ResultMapper, single bool) error

	// ReadRowsFunc mocks the ReadRows method.
	ReadRowsFunc func(query string) (*driver.BoltRowReader, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Count holds details about calls to the Count method.
		Count []struct {
			// Query is the query argument value.
			Query string
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Query is the query argument value.
			Query string
			// Mapp is the mapp argument value.
			Mapp mapper.ResultMapper
			// Single is the single argument value.
			Single bool
		}
		// ReadRows holds details about calls to the ReadRows method.
		ReadRows []struct {
			// Query is the query argument value.
			Query string
		}
	}
}

// Close calls CloseFunc.
func (mock *Neo4jDriverMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("Neo4jDriverMock.CloseFunc: method is nil but Neo4jDriver.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockNeo4jDriverMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockNeo4jDriverMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedNeo4jDriver.CloseCalls())
func (mock *Neo4jDriverMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockNeo4jDriverMockClose.RLock()
	calls = mock.calls.Close
	lockNeo4jDriverMockClose.RUnlock()
	return calls
}

// Count calls CountFunc.
func (mock *Neo4jDriverMock) Count(query string) (int64, error) {
	if mock.CountFunc == nil {
		panic("Neo4jDriverMock.CountFunc: method is nil but Neo4jDriver.Count was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	lockNeo4jDriverMockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	lockNeo4jDriverMockCount.Unlock()
	return mock.CountFunc(query)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//     len(mockedNeo4jDriver.CountCalls())
func (mock *Neo4jDriverMock) CountCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	lockNeo4jDriverMockCount.RLock()
	calls = mock.calls.Count
	lockNeo4jDriverMockCount.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *Neo4jDriverMock) Exec(query string, params map[string]interface{}) error {
	if mock.ExecFunc == nil {
		panic("Neo4jDriverMock.ExecFunc: method is nil but Neo4jDriver.Exec was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockNeo4jDriverMockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	lockNeo4jDriverMockExec.Unlock()
	return mock.ExecFunc(query, params)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedNeo4jDriver.ExecCalls())
func (mock *Neo4jDriverMock) ExecCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockNeo4jDriverMockExec.RLock()
	calls = mock.calls.Exec
	lockNeo4jDriverMockExec.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *Neo4jDriverMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("Neo4jDriverMock.HealthcheckFunc: method is nil but Neo4jDriver.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	lockNeo4jDriverMockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	lockNeo4jDriverMockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedNeo4jDriver.HealthcheckCalls())
func (mock *Neo4jDriverMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	lockNeo4jDriverMockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	lockNeo4jDriverMockHealthcheck.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *Neo4jDriverMock) Read(query string, mapp mapper.ResultMapper, single bool) error {
	if mock.ReadFunc == nil {
		panic("Neo4jDriverMock.ReadFunc: method is nil but Neo4jDriver.Read was just called")
	}
	callInfo := struct {
		Query  string
		Mapp   mapper.ResultMapper
		Single bool
	}{
		Query:  query,
		Mapp:   mapp,
		Single: single,
	}
	lockNeo4jDriverMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockNeo4jDriverMockRead.Unlock()
	return mock.ReadFunc(query, mapp, single)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedNeo4jDriver.ReadCalls())
func (mock *Neo4jDriverMock) ReadCalls() []struct {
	Query  string
	Mapp   mapper.ResultMapper
	Single bool
} {
	var calls []struct {
		Query  string
		Mapp   mapper.ResultMapper
		Single bool
	}
	lockNeo4jDriverMockRead.RLock()
	calls = mock.calls.Read
	lockNeo4jDriverMockRead.RUnlock()
	return calls
}

// ReadRows calls ReadRowsFunc.
func (mock *Neo4jDriverMock) ReadRows(query string) (*driver.BoltRowReader, error) {
	if mock.ReadRowsFunc == nil {
		panic("Neo4jDriverMock.ReadRowsFunc: method is nil but Neo4jDriver.ReadRows was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	lockNeo4jDriverMockReadRows.Lock()
	mock.calls.ReadRows = append(mock.calls.ReadRows, callInfo)
	lockNeo4jDriverMockReadRows.Unlock()
	return mock.ReadRowsFunc(query)
}

// ReadRowsCalls gets all the calls that were made to ReadRows.
// Check the length with:
//     len(mockedNeo4jDriver.ReadRowsCalls())
func (mock *Neo4jDriverMock) ReadRowsCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	lockNeo4jDriverMockReadRows.RLock()
	calls = mock.calls.ReadRows
	lockNeo4jDriverMockReadRows.RUnlock()
	return calls
}
