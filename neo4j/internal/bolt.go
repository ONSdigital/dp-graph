// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"github.com/ONSdigital/dp-graph/neo4j/neo4jdriver"
	"sync"
)

var (
	lockResultMockLastInsertId sync.RWMutex
	lockResultMockMetadata     sync.RWMutex
	lockResultMockRowsAffected sync.RWMutex
)

// Ensure, that ResultMock does implement neo4jdriver.Result.
// If this is not the case, regenerate this file with moq.
var _ neo4jdriver.Result = &ResultMock{}

// ResultMock is a mock implementation of neo4jdriver.Result.
//
//     func TestSomethingThatUsesResult(t *testing.T) {
//
//         // make and configure a mocked neo4jdriver.Result
//         mockedResult := &ResultMock{
//             LastInsertIdFunc: func() (int64, error) {
// 	               panic("mock out the LastInsertId method")
//             },
//             MetadataFunc: func() map[string]interface{} {
// 	               panic("mock out the Metadata method")
//             },
//             RowsAffectedFunc: func() (int64, error) {
// 	               panic("mock out the RowsAffected method")
//             },
//         }
//
//         // use mockedResult in code that requires neo4jdriver.Result
//         // and then make assertions.
//
//     }
type ResultMock struct {
	// LastInsertIdFunc mocks the LastInsertId method.
	LastInsertIdFunc func() (int64, error)

	// MetadataFunc mocks the Metadata method.
	MetadataFunc func() map[string]interface{}

	// RowsAffectedFunc mocks the RowsAffected method.
	RowsAffectedFunc func() (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// LastInsertId holds details about calls to the LastInsertId method.
		LastInsertId []struct {
		}
		// Metadata holds details about calls to the Metadata method.
		Metadata []struct {
		}
		// RowsAffected holds details about calls to the RowsAffected method.
		RowsAffected []struct {
		}
	}
}

// LastInsertId calls LastInsertIdFunc.
func (mock *ResultMock) LastInsertId() (int64, error) {
	if mock.LastInsertIdFunc == nil {
		panic("ResultMock.LastInsertIdFunc: method is nil but Result.LastInsertId was just called")
	}
	callInfo := struct {
	}{}
	lockResultMockLastInsertId.Lock()
	mock.calls.LastInsertId = append(mock.calls.LastInsertId, callInfo)
	lockResultMockLastInsertId.Unlock()
	return mock.LastInsertIdFunc()
}

// LastInsertIdCalls gets all the calls that were made to LastInsertId.
// Check the length with:
//     len(mockedResult.LastInsertIdCalls())
func (mock *ResultMock) LastInsertIdCalls() []struct {
} {
	var calls []struct {
	}
	lockResultMockLastInsertId.RLock()
	calls = mock.calls.LastInsertId
	lockResultMockLastInsertId.RUnlock()
	return calls
}

// Metadata calls MetadataFunc.
func (mock *ResultMock) Metadata() map[string]interface{} {
	if mock.MetadataFunc == nil {
		panic("ResultMock.MetadataFunc: method is nil but Result.Metadata was just called")
	}
	callInfo := struct {
	}{}
	lockResultMockMetadata.Lock()
	mock.calls.Metadata = append(mock.calls.Metadata, callInfo)
	lockResultMockMetadata.Unlock()
	return mock.MetadataFunc()
}

// MetadataCalls gets all the calls that were made to Metadata.
// Check the length with:
//     len(mockedResult.MetadataCalls())
func (mock *ResultMock) MetadataCalls() []struct {
} {
	var calls []struct {
	}
	lockResultMockMetadata.RLock()
	calls = mock.calls.Metadata
	lockResultMockMetadata.RUnlock()
	return calls
}

// RowsAffected calls RowsAffectedFunc.
func (mock *ResultMock) RowsAffected() (int64, error) {
	if mock.RowsAffectedFunc == nil {
		panic("ResultMock.RowsAffectedFunc: method is nil but Result.RowsAffected was just called")
	}
	callInfo := struct {
	}{}
	lockResultMockRowsAffected.Lock()
	mock.calls.RowsAffected = append(mock.calls.RowsAffected, callInfo)
	lockResultMockRowsAffected.Unlock()
	return mock.RowsAffectedFunc()
}

// RowsAffectedCalls gets all the calls that were made to RowsAffected.
// Check the length with:
//     len(mockedResult.RowsAffectedCalls())
func (mock *ResultMock) RowsAffectedCalls() []struct {
} {
	var calls []struct {
	}
	lockResultMockRowsAffected.RLock()
	calls = mock.calls.RowsAffected
	lockResultMockRowsAffected.RUnlock()
	return calls
}
