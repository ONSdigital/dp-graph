// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"database/sql/driver"
	"github.com/ONSdigital/dp-graph/v3/neo4j/neo4jdriver"
	"github.com/ONSdigital/golang-neo4j-bolt-driver"
	"sync"
	"time"
)

var (
	lockBoltConnMockBegin           sync.RWMutex
	lockBoltConnMockClose           sync.RWMutex
	lockBoltConnMockExecNeo         sync.RWMutex
	lockBoltConnMockExecPipeline    sync.RWMutex
	lockBoltConnMockGetTimeout      sync.RWMutex
	lockBoltConnMockPrepareNeo      sync.RWMutex
	lockBoltConnMockPreparePipeline sync.RWMutex
	lockBoltConnMockQueryNeo        sync.RWMutex
	lockBoltConnMockQueryNeoAll     sync.RWMutex
	lockBoltConnMockQueryPipeline   sync.RWMutex
	lockBoltConnMockSetChunkSize    sync.RWMutex
	lockBoltConnMockSetTimeout      sync.RWMutex
)

// Ensure, that BoltConnMock does implement neo4jdriver.BoltConn.
// If this is not the case, regenerate this file with moq.
var _ neo4jdriver.BoltConn = &BoltConnMock{}

// BoltConnMock is a mock implementation of neo4jdriver.BoltConn.
//
//     func TestSomethingThatUsesBoltConn(t *testing.T) {
//
//         // make and configure a mocked neo4jdriver.BoltConn
//         mockedBoltConn := &BoltConnMock{
//             BeginFunc: func() (driver.Tx, error) {
// 	               panic("mock out the Begin method")
//             },
//             CloseFunc: func() error {
// 	               panic("mock out the Close method")
//             },
//             ExecNeoFunc: func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error) {
// 	               panic("mock out the ExecNeo method")
//             },
//             ExecPipelineFunc: func(query []string, params ...map[string]interface{}) ([]golangNeo4jBoltDriver.Result, error) {
// 	               panic("mock out the ExecPipeline method")
//             },
//             GetTimeoutFunc: func() time.Duration {
// 	               panic("mock out the GetTimeout method")
//             },
//             PrepareNeoFunc: func(query string) (golangNeo4jBoltDriver.Stmt, error) {
// 	               panic("mock out the PrepareNeo method")
//             },
//             PreparePipelineFunc: func(query ...string) (golangNeo4jBoltDriver.PipelineStmt, error) {
// 	               panic("mock out the PreparePipeline method")
//             },
//             QueryNeoFunc: func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Rows, error) {
// 	               panic("mock out the QueryNeo method")
//             },
//             QueryNeoAllFunc: func(query string, params map[string]interface{}) ([][]interface{}, map[string]interface{}, map[string]interface{}, error) {
// 	               panic("mock out the QueryNeoAll method")
//             },
//             QueryPipelineFunc: func(query []string, params ...map[string]interface{}) (golangNeo4jBoltDriver.PipelineRows, error) {
// 	               panic("mock out the QueryPipeline method")
//             },
//             SetChunkSizeFunc: func(in1 uint16)  {
// 	               panic("mock out the SetChunkSize method")
//             },
//             SetTimeoutFunc: func(in1 time.Duration)  {
// 	               panic("mock out the SetTimeout method")
//             },
//         }
//
//         // use mockedBoltConn in code that requires neo4jdriver.BoltConn
//         // and then make assertions.
//
//     }
type BoltConnMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() (driver.Tx, error)

	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ExecNeoFunc mocks the ExecNeo method.
	ExecNeoFunc func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error)

	// ExecPipelineFunc mocks the ExecPipeline method.
	ExecPipelineFunc func(query []string, params ...map[string]interface{}) ([]golangNeo4jBoltDriver.Result, error)

	// GetTimeoutFunc mocks the GetTimeout method.
	GetTimeoutFunc func() time.Duration

	// PrepareNeoFunc mocks the PrepareNeo method.
	PrepareNeoFunc func(query string) (golangNeo4jBoltDriver.Stmt, error)

	// PreparePipelineFunc mocks the PreparePipeline method.
	PreparePipelineFunc func(query ...string) (golangNeo4jBoltDriver.PipelineStmt, error)

	// QueryNeoFunc mocks the QueryNeo method.
	QueryNeoFunc func(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Rows, error)

	// QueryNeoAllFunc mocks the QueryNeoAll method.
	QueryNeoAllFunc func(query string, params map[string]interface{}) ([][]interface{}, map[string]interface{}, map[string]interface{}, error)

	// QueryPipelineFunc mocks the QueryPipeline method.
	QueryPipelineFunc func(query []string, params ...map[string]interface{}) (golangNeo4jBoltDriver.PipelineRows, error)

	// SetChunkSizeFunc mocks the SetChunkSize method.
	SetChunkSizeFunc func(in1 uint16)

	// SetTimeoutFunc mocks the SetTimeout method.
	SetTimeoutFunc func(in1 time.Duration)

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// ExecNeo holds details about calls to the ExecNeo method.
		ExecNeo []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// ExecPipeline holds details about calls to the ExecPipeline method.
		ExecPipeline []struct {
			// Query is the query argument value.
			Query []string
			// Params is the params argument value.
			Params []map[string]interface{}
		}
		// GetTimeout holds details about calls to the GetTimeout method.
		GetTimeout []struct {
		}
		// PrepareNeo holds details about calls to the PrepareNeo method.
		PrepareNeo []struct {
			// Query is the query argument value.
			Query string
		}
		// PreparePipeline holds details about calls to the PreparePipeline method.
		PreparePipeline []struct {
			// Query is the query argument value.
			Query []string
		}
		// QueryNeo holds details about calls to the QueryNeo method.
		QueryNeo []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// QueryNeoAll holds details about calls to the QueryNeoAll method.
		QueryNeoAll []struct {
			// Query is the query argument value.
			Query string
			// Params is the params argument value.
			Params map[string]interface{}
		}
		// QueryPipeline holds details about calls to the QueryPipeline method.
		QueryPipeline []struct {
			// Query is the query argument value.
			Query []string
			// Params is the params argument value.
			Params []map[string]interface{}
		}
		// SetChunkSize holds details about calls to the SetChunkSize method.
		SetChunkSize []struct {
			// In1 is the in1 argument value.
			In1 uint16
		}
		// SetTimeout holds details about calls to the SetTimeout method.
		SetTimeout []struct {
			// In1 is the in1 argument value.
			In1 time.Duration
		}
	}
}

// Begin calls BeginFunc.
func (mock *BoltConnMock) Begin() (driver.Tx, error) {
	if mock.BeginFunc == nil {
		panic("BoltConnMock.BeginFunc: method is nil but BoltConn.Begin was just called")
	}
	callInfo := struct {
	}{}
	lockBoltConnMockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	lockBoltConnMockBegin.Unlock()
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//     len(mockedBoltConn.BeginCalls())
func (mock *BoltConnMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	lockBoltConnMockBegin.RLock()
	calls = mock.calls.Begin
	lockBoltConnMockBegin.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *BoltConnMock) Close() error {
	if mock.CloseFunc == nil {
		panic("BoltConnMock.CloseFunc: method is nil but BoltConn.Close was just called")
	}
	callInfo := struct {
	}{}
	lockBoltConnMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockBoltConnMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedBoltConn.CloseCalls())
func (mock *BoltConnMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockBoltConnMockClose.RLock()
	calls = mock.calls.Close
	lockBoltConnMockClose.RUnlock()
	return calls
}

// ExecNeo calls ExecNeoFunc.
func (mock *BoltConnMock) ExecNeo(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Result, error) {
	if mock.ExecNeoFunc == nil {
		panic("BoltConnMock.ExecNeoFunc: method is nil but BoltConn.ExecNeo was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockBoltConnMockExecNeo.Lock()
	mock.calls.ExecNeo = append(mock.calls.ExecNeo, callInfo)
	lockBoltConnMockExecNeo.Unlock()
	return mock.ExecNeoFunc(query, params)
}

// ExecNeoCalls gets all the calls that were made to ExecNeo.
// Check the length with:
//     len(mockedBoltConn.ExecNeoCalls())
func (mock *BoltConnMock) ExecNeoCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockBoltConnMockExecNeo.RLock()
	calls = mock.calls.ExecNeo
	lockBoltConnMockExecNeo.RUnlock()
	return calls
}

// ExecPipeline calls ExecPipelineFunc.
func (mock *BoltConnMock) ExecPipeline(query []string, params ...map[string]interface{}) ([]golangNeo4jBoltDriver.Result, error) {
	if mock.ExecPipelineFunc == nil {
		panic("BoltConnMock.ExecPipelineFunc: method is nil but BoltConn.ExecPipeline was just called")
	}
	callInfo := struct {
		Query  []string
		Params []map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockBoltConnMockExecPipeline.Lock()
	mock.calls.ExecPipeline = append(mock.calls.ExecPipeline, callInfo)
	lockBoltConnMockExecPipeline.Unlock()
	return mock.ExecPipelineFunc(query, params...)
}

// ExecPipelineCalls gets all the calls that were made to ExecPipeline.
// Check the length with:
//     len(mockedBoltConn.ExecPipelineCalls())
func (mock *BoltConnMock) ExecPipelineCalls() []struct {
	Query  []string
	Params []map[string]interface{}
} {
	var calls []struct {
		Query  []string
		Params []map[string]interface{}
	}
	lockBoltConnMockExecPipeline.RLock()
	calls = mock.calls.ExecPipeline
	lockBoltConnMockExecPipeline.RUnlock()
	return calls
}

// GetTimeout calls GetTimeoutFunc.
func (mock *BoltConnMock) GetTimeout() time.Duration {
	if mock.GetTimeoutFunc == nil {
		panic("BoltConnMock.GetTimeoutFunc: method is nil but BoltConn.GetTimeout was just called")
	}
	callInfo := struct {
	}{}
	lockBoltConnMockGetTimeout.Lock()
	mock.calls.GetTimeout = append(mock.calls.GetTimeout, callInfo)
	lockBoltConnMockGetTimeout.Unlock()
	return mock.GetTimeoutFunc()
}

// GetTimeoutCalls gets all the calls that were made to GetTimeout.
// Check the length with:
//     len(mockedBoltConn.GetTimeoutCalls())
func (mock *BoltConnMock) GetTimeoutCalls() []struct {
} {
	var calls []struct {
	}
	lockBoltConnMockGetTimeout.RLock()
	calls = mock.calls.GetTimeout
	lockBoltConnMockGetTimeout.RUnlock()
	return calls
}

// PrepareNeo calls PrepareNeoFunc.
func (mock *BoltConnMock) PrepareNeo(query string) (golangNeo4jBoltDriver.Stmt, error) {
	if mock.PrepareNeoFunc == nil {
		panic("BoltConnMock.PrepareNeoFunc: method is nil but BoltConn.PrepareNeo was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	lockBoltConnMockPrepareNeo.Lock()
	mock.calls.PrepareNeo = append(mock.calls.PrepareNeo, callInfo)
	lockBoltConnMockPrepareNeo.Unlock()
	return mock.PrepareNeoFunc(query)
}

// PrepareNeoCalls gets all the calls that were made to PrepareNeo.
// Check the length with:
//     len(mockedBoltConn.PrepareNeoCalls())
func (mock *BoltConnMock) PrepareNeoCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	lockBoltConnMockPrepareNeo.RLock()
	calls = mock.calls.PrepareNeo
	lockBoltConnMockPrepareNeo.RUnlock()
	return calls
}

// PreparePipeline calls PreparePipelineFunc.
func (mock *BoltConnMock) PreparePipeline(query ...string) (golangNeo4jBoltDriver.PipelineStmt, error) {
	if mock.PreparePipelineFunc == nil {
		panic("BoltConnMock.PreparePipelineFunc: method is nil but BoltConn.PreparePipeline was just called")
	}
	callInfo := struct {
		Query []string
	}{
		Query: query,
	}
	lockBoltConnMockPreparePipeline.Lock()
	mock.calls.PreparePipeline = append(mock.calls.PreparePipeline, callInfo)
	lockBoltConnMockPreparePipeline.Unlock()
	return mock.PreparePipelineFunc(query...)
}

// PreparePipelineCalls gets all the calls that were made to PreparePipeline.
// Check the length with:
//     len(mockedBoltConn.PreparePipelineCalls())
func (mock *BoltConnMock) PreparePipelineCalls() []struct {
	Query []string
} {
	var calls []struct {
		Query []string
	}
	lockBoltConnMockPreparePipeline.RLock()
	calls = mock.calls.PreparePipeline
	lockBoltConnMockPreparePipeline.RUnlock()
	return calls
}

// QueryNeo calls QueryNeoFunc.
func (mock *BoltConnMock) QueryNeo(query string, params map[string]interface{}) (golangNeo4jBoltDriver.Rows, error) {
	if mock.QueryNeoFunc == nil {
		panic("BoltConnMock.QueryNeoFunc: method is nil but BoltConn.QueryNeo was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockBoltConnMockQueryNeo.Lock()
	mock.calls.QueryNeo = append(mock.calls.QueryNeo, callInfo)
	lockBoltConnMockQueryNeo.Unlock()
	return mock.QueryNeoFunc(query, params)
}

// QueryNeoCalls gets all the calls that were made to QueryNeo.
// Check the length with:
//     len(mockedBoltConn.QueryNeoCalls())
func (mock *BoltConnMock) QueryNeoCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockBoltConnMockQueryNeo.RLock()
	calls = mock.calls.QueryNeo
	lockBoltConnMockQueryNeo.RUnlock()
	return calls
}

// QueryNeoAll calls QueryNeoAllFunc.
func (mock *BoltConnMock) QueryNeoAll(query string, params map[string]interface{}) ([][]interface{}, map[string]interface{}, map[string]interface{}, error) {
	if mock.QueryNeoAllFunc == nil {
		panic("BoltConnMock.QueryNeoAllFunc: method is nil but BoltConn.QueryNeoAll was just called")
	}
	callInfo := struct {
		Query  string
		Params map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockBoltConnMockQueryNeoAll.Lock()
	mock.calls.QueryNeoAll = append(mock.calls.QueryNeoAll, callInfo)
	lockBoltConnMockQueryNeoAll.Unlock()
	return mock.QueryNeoAllFunc(query, params)
}

// QueryNeoAllCalls gets all the calls that were made to QueryNeoAll.
// Check the length with:
//     len(mockedBoltConn.QueryNeoAllCalls())
func (mock *BoltConnMock) QueryNeoAllCalls() []struct {
	Query  string
	Params map[string]interface{}
} {
	var calls []struct {
		Query  string
		Params map[string]interface{}
	}
	lockBoltConnMockQueryNeoAll.RLock()
	calls = mock.calls.QueryNeoAll
	lockBoltConnMockQueryNeoAll.RUnlock()
	return calls
}

// QueryPipeline calls QueryPipelineFunc.
func (mock *BoltConnMock) QueryPipeline(query []string, params ...map[string]interface{}) (golangNeo4jBoltDriver.PipelineRows, error) {
	if mock.QueryPipelineFunc == nil {
		panic("BoltConnMock.QueryPipelineFunc: method is nil but BoltConn.QueryPipeline was just called")
	}
	callInfo := struct {
		Query  []string
		Params []map[string]interface{}
	}{
		Query:  query,
		Params: params,
	}
	lockBoltConnMockQueryPipeline.Lock()
	mock.calls.QueryPipeline = append(mock.calls.QueryPipeline, callInfo)
	lockBoltConnMockQueryPipeline.Unlock()
	return mock.QueryPipelineFunc(query, params...)
}

// QueryPipelineCalls gets all the calls that were made to QueryPipeline.
// Check the length with:
//     len(mockedBoltConn.QueryPipelineCalls())
func (mock *BoltConnMock) QueryPipelineCalls() []struct {
	Query  []string
	Params []map[string]interface{}
} {
	var calls []struct {
		Query  []string
		Params []map[string]interface{}
	}
	lockBoltConnMockQueryPipeline.RLock()
	calls = mock.calls.QueryPipeline
	lockBoltConnMockQueryPipeline.RUnlock()
	return calls
}

// SetChunkSize calls SetChunkSizeFunc.
func (mock *BoltConnMock) SetChunkSize(in1 uint16) {
	if mock.SetChunkSizeFunc == nil {
		panic("BoltConnMock.SetChunkSizeFunc: method is nil but BoltConn.SetChunkSize was just called")
	}
	callInfo := struct {
		In1 uint16
	}{
		In1: in1,
	}
	lockBoltConnMockSetChunkSize.Lock()
	mock.calls.SetChunkSize = append(mock.calls.SetChunkSize, callInfo)
	lockBoltConnMockSetChunkSize.Unlock()
	mock.SetChunkSizeFunc(in1)
}

// SetChunkSizeCalls gets all the calls that were made to SetChunkSize.
// Check the length with:
//     len(mockedBoltConn.SetChunkSizeCalls())
func (mock *BoltConnMock) SetChunkSizeCalls() []struct {
	In1 uint16
} {
	var calls []struct {
		In1 uint16
	}
	lockBoltConnMockSetChunkSize.RLock()
	calls = mock.calls.SetChunkSize
	lockBoltConnMockSetChunkSize.RUnlock()
	return calls
}

// SetTimeout calls SetTimeoutFunc.
func (mock *BoltConnMock) SetTimeout(in1 time.Duration) {
	if mock.SetTimeoutFunc == nil {
		panic("BoltConnMock.SetTimeoutFunc: method is nil but BoltConn.SetTimeout was just called")
	}
	callInfo := struct {
		In1 time.Duration
	}{
		In1: in1,
	}
	lockBoltConnMockSetTimeout.Lock()
	mock.calls.SetTimeout = append(mock.calls.SetTimeout, callInfo)
	lockBoltConnMockSetTimeout.Unlock()
	mock.SetTimeoutFunc(in1)
}

// SetTimeoutCalls gets all the calls that were made to SetTimeout.
// Check the length with:
//     len(mockedBoltConn.SetTimeoutCalls())
func (mock *BoltConnMock) SetTimeoutCalls() []struct {
	In1 time.Duration
} {
	var calls []struct {
		In1 time.Duration
	}
	lockBoltConnMockSetTimeout.RLock()
	calls = mock.calls.SetTimeout
	lockBoltConnMockSetTimeout.RUnlock()
	return calls
}
